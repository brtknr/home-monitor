version: '3.3'    
services:
  bme280:
    container_name: bme280
    build:
      context: ./
      dockerfile: ./Dockerfile
    volumes:
      - ./secret.py:/app/secret.py
    command:
      - /app/poll-bme280.py
    restart: always
    depends_on:
      - influxdb
  octopus:
    container_name: octopus
    build:
      context: ./
      dockerfile: ./Dockerfile
    volumes:
      - ./secret.py:/app/secret.py
    command:
      - poll-octopus.py
    restart: always
    depends_on:
      - influxdb
  poll-internet:
    container_name: internet
    build:
      context: ./
      dockerfile: ./Dockerfile
    volumes:
      - ./secret.py:/app/secret.py
    command:
      - poll-internet.py
    restart: always
    depends_on:
      - influxdb
  patch-cloudflare:
    container_name: cloudflare
    build:
      context: ./
      dockerfile: ./Dockerfile
    volumes:
      - ./secret.py:/app/secret.py
    command:
      - patch-cloudflare.py
    restart: always
    depends_on:
      - influxdb
  flask-server:
    container_name: flask
    build:
      context: ./
      dockerfile: ./Dockerfile
    volumes:
      - ./secret.py:/app/secret.py
    environment:
      - FLASK_APP=./flask-server.py
    entrypoint:
      - flask
    command:
      - run
      - --host=0.0.0.0
    ports:
      - 5000:5000
    restart: always
    depends_on:
      - influxdb
  grafana:
    container_name: grafana
    image: grafana/grafana:8.2.3
    restart: always
    volumes:
      - ./volumes/etc/grafana/:/etc/grafana
      - ./volumes/var/lib/grafana:/var/lib/grafana
    depends_on:
      - influxdb
  influxdb:
    container_name: influxdb
    image: arm64v8/influxdb:1.7
    ports:
      - "8086:8086"
    volumes:
      - ./volumes/var/lib/influxdb:/var/lib/influxdb
      - ./volumes/etc/influxdb:/volumes/etc/influxdb
    restart: always
  nginx:
    container_name: nginx
    image: nginx:1.21-alpine
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./volumes/etc/nginx/conf.d:/etc/nginx/conf.d
      - ./volumes/etc/letsencrypt:/etc/letsencrypt
      - ./volumes/var/www/certbot:/var/www/certbot
    restart: always
  certbot:
    container_name: certbot
    image: certbot/certbot:arm64v8-v1.19.0
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./volumes/etc/letsencrypt:/etc/letsencrypt
      - ./volumes/var/www/certbot:/var/www/certbot
    restart: always
    depends_on:
      - nginx
  wireguard:
    image: lscr.io/linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - SERVERURL=dash.rawn.uk
      - SERVERPORT=51820
      - PEERS=1
      - PEERDNS=auto #optional
      - INTERNAL_SUBNET=10.0.10.0 #optional
      - ALLOWEDIPS=0.0.0.0/0 #optional
    volumes:
      - ./volumes/etc/wireguard:/config
      - ./volumes/var/lib/wireguard:/lib/modules
    ports:
      - 51820:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped
